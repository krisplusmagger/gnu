<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classgr_1_1uhd_1_1rfnoc__graph" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>gr::uhd::rfnoc_graph</compoundname>
    <includes refid="rfnoc__graph_8h" local="no">gnuradio/uhd/rfnoc_graph.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1uhd_1_1rfnoc__graph_1abc87a140ae9d817bc18e9398697505c9" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgr_1_1uhd_1_1rfnoc__graph" kindref="compound">rfnoc_graph</ref> &gt;</type>
        <definition>using gr::uhd::rfnoc_graph::sptr =  std::shared_ptr&lt;rfnoc_graph&gt;</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <qualifiedname>gr::uhd::rfnoc_graph::sptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="32" column="5" bodyfile="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classgr_1_1uhd_1_1rfnoc__graph_1aa5b06bf015f6f38f0260b12bcf323cd1" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t gr::uhd::rfnoc_graph::NULL_ADAPTER_ID</definition>
        <argsstring></argsstring>
        <name>NULL_ADAPTER_ID</name>
        <qualifiedname>gr::uhd::rfnoc_graph::NULL_ADAPTER_ID</qualifiedname>
        <initializer>=
        static_cast&lt;size_t&gt;(::uhd::transport::NULL_ADAPTER_ID)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="34" column="25" bodyfile="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a70b7a5ed22247225e635851dafaf5879" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1uhd_1_1rfnoc__graph_1abc87a140ae9d817bc18e9398697505c9" kindref="member">sptr</ref></type>
        <definition>static sptr gr::uhd::rfnoc_graph::make</definition>
        <argsstring>(const ::uhd::device_addr_t &amp;dev_addr)</argsstring>
        <name>make</name>
        <qualifiedname>gr::uhd::rfnoc_graph::make</qualifiedname>
        <param>
          <type>const ::uhd::device_addr_t &amp;</type>
          <declname>dev_addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="37" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a0ab0c64e583e0943e91d308ccd67e1f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual gr::uhd::rfnoc_graph::~rfnoc_graph</definition>
        <argsstring>()</argsstring>
        <name>~rfnoc_graph</name>
        <qualifiedname>gr::uhd::rfnoc_graph::~rfnoc_graph</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="39" column="13" bodyfile="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a5652857de18a5799cd1877538710fc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::connect</definition>
        <argsstring>(const std::string &amp;src_block, const size_t src_block_port, const std::string &amp;dst_block, const size_t dst_block_port, const bool is_back_edge=false)=0</argsstring>
        <name>connect</name>
        <qualifiedname>gr::uhd::rfnoc_graph::connect</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src_block</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>src_block_port</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dst_block</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>dst_block_port</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_back_edge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect two blocks, or a block to a streamer, or a streamer to a block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="49" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a613eb2367e0fbe996d671a3e61b25180" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::connect</definition>
        <argsstring>(const std::string &amp;src_block, const std::string &amp;dst_block, const bool is_back_edge=false)=0</argsstring>
        <name>connect</name>
        <qualifiedname>gr::uhd::rfnoc_graph::connect</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src_block</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dst_block</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_back_edge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convenience overload: Defaults to port 0 on both blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="61" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1adf77b9e6b573e41b228cb479b9f7bf38" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::rx_streamer::sptr</type>
        <definition>virtual ::uhd::rx_streamer::sptr gr::uhd::rfnoc_graph::create_rx_streamer</definition>
        <argsstring>(const size_t num_ports, const ::uhd::stream_args_t &amp;args)=0</argsstring>
        <name>create_rx_streamer</name>
        <qualifiedname>gr::uhd::rfnoc_graph::create_rx_streamer</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>num_ports</declname>
        </param>
        <param>
          <type>const ::uhd::stream_args_t &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create an RX streamer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1aebc1e74916a6f3bbc6bf7ef0a5551d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::tx_streamer::sptr</type>
        <definition>virtual ::uhd::tx_streamer::sptr gr::uhd::rfnoc_graph::create_tx_streamer</definition>
        <argsstring>(const size_t num_ports, const ::uhd::stream_args_t &amp;args)=0</argsstring>
        <name>create_tx_streamer</name>
        <qualifiedname>gr::uhd::rfnoc_graph::create_tx_streamer</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>num_ports</declname>
        </param>
        <param>
          <type>const ::uhd::stream_args_t &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a TX streamer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a18c72d559ff95e05423932c359b2edab" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::set_streamer_adapter_id</definition>
        <argsstring>(const std::string &amp;stream_block_id, const size_t port, const size_t adapter_id)=0</argsstring>
        <name>set_streamer_adapter_id</name>
        <qualifiedname>gr::uhd::rfnoc_graph::set_streamer_adapter_id</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>stream_block_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>adapter_id</declname>
        </param>
        <briefdescription>
<para>Set the desired adapter ID for a streamer connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="100" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a87f57eb679578caa3d628c03afa1e747" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::commit</definition>
        <argsstring>()=0</argsstring>
        <name>commit</name>
        <qualifiedname>gr::uhd::rfnoc_graph::commit</qualifiedname>
        <briefdescription>
<para>Commit the graph and run initial checks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="107" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1ae3b65b312fca8405afa631788f3b20f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string gr::uhd::rfnoc_graph::get_block_id</definition>
        <argsstring>(const std::string &amp;block_name, const int device_select, const int block_select)=0</argsstring>
        <name>get_block_id</name>
        <qualifiedname>gr::uhd::rfnoc_graph::get_block_id</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>block_name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>device_select</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>block_select</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a valid block ID string, if it exists, or an empty string, if not</para>
<para>This will check the available blocks on the connected devices and see if they match the block name, device ID, and block number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="114" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1a55f922bbeae810da681b5db9c72624d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::set_time_source</definition>
        <argsstring>(const std::string &amp;source, const size_t mb_index)=0</argsstring>
        <name>set_time_source</name>
        <qualifiedname>gr::uhd::rfnoc_graph::set_time_source</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mb_index</declname>
        </param>
        <briefdescription>
<para>Set time source on the specified motherboard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="125" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1af32f0815ff513e06076e8da139d9ef1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr::uhd::rfnoc_graph::set_clock_source</definition>
        <argsstring>(const std::string &amp;source, const size_t mb_index)=0</argsstring>
        <name>set_clock_source</name>
        <qualifiedname>gr::uhd::rfnoc_graph::set_clock_source</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>mb_index</declname>
        </param>
        <briefdescription>
<para>Set clock source on the specified motherboard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="134" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classgr_1_1uhd_1_1rfnoc__graph_1af9595e799917d9906f3961c8d128d8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::uhd::rfnoc::noc_block_base::sptr</type>
        <definition>virtual ::uhd::rfnoc::noc_block_base::sptr gr::uhd::rfnoc_graph::get_block_ref</definition>
        <argsstring>(const std::string &amp;block_id, const size_t max_ref_count)=0</argsstring>
        <name>get_block_ref</name>
        <qualifiedname>gr::uhd::rfnoc_graph::get_block_ref</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>block_id</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>max_ref_count</declname>
        </param>
        <briefdescription>
<para>Return a reference to the block with a given block ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="150" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>GNU Radio-specific wrapper for uhd::rfnoc::rfnoc_graph</para>
<para>This wraps uhd::rfnoc::rfnoc_graph for simpler insertion into GNU Radio flow graphs. All API calls match those on said class. </para>
    </detaileddescription>
    <location file="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" line="29" column="1" bodyfile="/home/desktop2/gnuradio/gr-uhd/include/gnuradio/uhd/rfnoc_graph.h" bodystart="30" bodyend="151"/>
    <listofallmembers>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a87f57eb679578caa3d628c03afa1e747" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>commit</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a5652857de18a5799cd1877538710fc90" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>connect</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a613eb2367e0fbe996d671a3e61b25180" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>connect</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1adf77b9e6b573e41b228cb479b9f7bf38" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>create_rx_streamer</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1aebc1e74916a6f3bbc6bf7ef0a5551d40" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>create_tx_streamer</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1ae3b65b312fca8405afa631788f3b20f3" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>get_block_id</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1af9595e799917d9906f3961c8d128d8dd" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>get_block_ref</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a70b7a5ed22247225e635851dafaf5879" prot="public" virt="non-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>make</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1aa5b06bf015f6f38f0260b12bcf323cd1" prot="public" virt="non-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>NULL_ADAPTER_ID</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1af32f0815ff513e06076e8da139d9ef1b" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>set_clock_source</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a18c72d559ff95e05423932c359b2edab" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>set_streamer_adapter_id</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a55f922bbeae810da681b5db9c72624d0" prot="public" virt="pure-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>set_time_source</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1abc87a140ae9d817bc18e9398697505c9" prot="public" virt="non-virtual"><scope>gr::uhd::rfnoc_graph</scope><name>sptr</name></member>
      <member refid="classgr_1_1uhd_1_1rfnoc__graph_1a0ab0c64e583e0943e91d308ccd67e1f4" prot="public" virt="virtual"><scope>gr::uhd::rfnoc_graph</scope><name>~rfnoc_graph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
