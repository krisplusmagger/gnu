<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="udp__sink__pydoc_8h" kind="file" language="C++">
    <compoundname>udp_sink_pydoc.h</compoundname>
    <includes refid="build_2gr-network_2python_2network_2bindings_2pydoc__macros_8h" local="yes">pydoc_macros.h</includes>
    <incdepgraph>
      <node id="2">
        <label>pydoc_macros.h</label>
        <link refid="build_2gr-network_2python_2network_2bindings_2pydoc__macros_8h"/>
      </node>
      <node id="1">
        <label>udp_sink_pydoc.h</label>
        <link refid="udp__sink__pydoc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="udp__sink__pydoc_8h_1a74021f021dcdfbb22891787b79c5529d" prot="public" static="no">
        <name>D</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="build_2gnuradio-runtime_2python_2gnuradio_2gr_2bindings_2pydoc__macros_8h_1a4e578031ec998eaeb933d5caa6a7d28a" kindref="member">DOC</ref>(gr, network, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" line="10" column="10" bodyfile="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" bodystart="10" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="udp__sink__pydoc_8h_1abd1a8eecaa7a11515b8654a21942e5b7" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* __doc_gr_network_udp_sink</definition>
        <argsstring></argsstring>
        <name>__doc_gr_network_udp_sink</name>
        <initializer>= R&quot;doc(This block provides a UDP Sink block that can send data over UDP streams to a specified host.

This block provides a UDP sink that supports sending data over a UDP stream to external applications. A number of header formats are supported including None (raw stream), and other header formats that allow for sequence numbers to be tracked. This feature allows the recipient to be aware of any frames dropped in transit or by its receiving stack. The UDP packet size can also be adjusted to support jumbo frames. For most networks, 1472 is the correct UDP data packet size that optimizes network transmission. Adjusting this value without a full understanding of the network implications can create additional network fragmentation and inefficient packet usage so should be avoided. For networks and endpoints supporting jumbo frames of 9000, 8972 would be the appropriate size (9000 - 28 header bytes). If send NULL packet as EOF is set, when the flowgraph terminates, an empty UDP packet is sent. This can be used on the receiving side to be aware that no more data may be received from the sending application. When pairing with the GNU Radio UDP source block, this isn&apos;t necessary and the source block can simply be set to source zero&apos;s when an incoming network data stream is not present in order to continue returning data from the work function. This block also supports IPv4 and IPv6 addresses and is automatically determined from the address provided.

Constructor Specific Documentation:

Build a udp_sink block.

Args:
    itemsize : 
    veclen : 
    host : 
    port : 
    header_type : 
    payloadsize : 
    send_eof : )doc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" line="18" column="19" bodyfile="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="udp__sink__pydoc_8h_1ac170313295f8d9658f1df21dff0b4bae" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* __doc_gr_network_udp_sink_udp_sink</definition>
        <argsstring></argsstring>
        <name>__doc_gr_network_udp_sink_udp_sink</name>
        <initializer>= R&quot;doc()doc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" line="36" column="19" bodyfile="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="udp__sink__pydoc_8h_1ad0a442c04362eff3238477d88b4a79d1" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* __doc_gr_network_udp_sink_make</definition>
        <argsstring></argsstring>
        <name>__doc_gr_network_udp_sink_make</name>
        <initializer>= R&quot;doc(This block provides a UDP Sink block that can send data over UDP streams to a specified host.

This block provides a UDP sink that supports sending data over a UDP stream to external applications. A number of header formats are supported including None (raw stream), and other header formats that allow for sequence numbers to be tracked. This feature allows the recipient to be aware of any frames dropped in transit or by its receiving stack. The UDP packet size can also be adjusted to support jumbo frames. For most networks, 1472 is the correct UDP data packet size that optimizes network transmission. Adjusting this value without a full understanding of the network implications can create additional network fragmentation and inefficient packet usage so should be avoided. For networks and endpoints supporting jumbo frames of 9000, 8972 would be the appropriate size (9000 - 28 header bytes). If send NULL packet as EOF is set, when the flowgraph terminates, an empty UDP packet is sent. This can be used on the receiving side to be aware that no more data may be received from the sending application. When pairing with the GNU Radio UDP source block, this isn&apos;t necessary and the source block can simply be set to source zero&apos;s when an incoming network data stream is not present in order to continue returning data from the work function. This block also supports IPv4 and IPv6 addresses and is automatically determined from the address provided.

Constructor Specific Documentation:

Build a udp_sink block.

Args:
    itemsize : 
    veclen : 
    host : 
    port : 
    header_type : 
    payloadsize : 
    send_eof : )doc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" line="39" column="19" bodyfile="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/desktop2/gnuradio/build/gr-network/python/network/bindings/udp_sink_pydoc.h"/>
  </compounddef>
</doxygen>
